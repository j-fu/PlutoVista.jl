var documenterSearchIndex = {"docs":
[{"location":"plotly/#Plotly-API","page":"plotly.js API","title":"Plotly API","text":"","category":"section"},{"location":"plotly/","page":"plotly.js API","title":"plotly.js API","text":"This API is normally being used via PlutoVistaPlot.","category":"page"},{"location":"plotly/","page":"plotly.js API","title":"plotly.js API","text":"PlutoPlotlyPlot\nPlutoPlotlyPlot(;resolution=(300,300),kwargs...)\nplot!(p::PlutoPlotlyPlot,x,y; kwargs...)\ntricontour!(p::PlutoPlotlyPlot,pts, tris,f;kwargs...)\ncontour!(p::PlutoPlotlyPlot,X,Y,f; kwargs...)\ntriplot!(p::PlutoPlotlyPlot,pts, tris,f)","category":"page"},{"location":"plotly/#PlutoVista.PlutoPlotlyPlot","page":"plotly.js API","title":"PlutoVista.PlutoPlotlyPlot","text":"mutable struct PlutoPlotlyPlot <: PlutoVista.AbstractPlutoVistaBackend\n\nStructure containing plot information for Plotly.js\n\n\n\n\n\n","category":"type"},{"location":"plotly/#PlutoVista.PlutoPlotlyPlot-Tuple{}","page":"plotly.js API","title":"PlutoVista.PlutoPlotlyPlot","text":"PlutoPlotlyPlot(; resolution, kwargs...) -> PlutoPlotlyPlot\n\n\nCreate a plotly plot.\n\n\n\n\n\n","category":"method"},{"location":"plotly/#PlutoVista.plot!-Tuple{PlutoPlotlyPlot, Any, Any}","page":"plotly.js API","title":"PlutoVista.plot!","text":"plot!(p, x, y; kwargs...)\n\n\n1D plotly.js plot\n\n\n\n\n\n","category":"method"},{"location":"plotly/#PlutoVista.tricontour!-Tuple{PlutoPlotlyPlot, Any, Any, Any}","page":"plotly.js API","title":"PlutoVista.tricontour!","text":"tricontour!(p, pts, tris, f; kwargs...)\n\n\nExperimental. Plot piecewise linear function on  triangular grid given as \"heatmap\" and with isolines using Plotly's mesh3d.\n\n\n\n\n\n","category":"method"},{"location":"plotly/#PlutoVista.contour!-Tuple{PlutoPlotlyPlot, Any, Any, Any}","page":"plotly.js API","title":"PlutoVista.contour!","text":"contour!(p, X, Y, f; kwargs...)\n\n\nExperimental. Plot heatmap and isolines on rectangular grid defined by X and Y using Plotly's native contour plot.\n\n\n\n\n\n","category":"method"},{"location":"plotly/#PlutoVista.triplot!-Tuple{PlutoPlotlyPlot, Any, Any, Any}","page":"plotly.js API","title":"PlutoVista.triplot!","text":"triplot!(p, pts, tris, f; kwargs...)\n\n\nExperimental. Plot piecewise linear function on  triangular grid given by points and triangles as matrices\n\n\n\n\n\n","category":"method"},{"location":"#PlutoVista.jl","page":"Home","title":"PlutoVista.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Plot library for Pluto notebooks based on plotly.js for 1D data and vtk.js (thus using WebGL)  for 2/3D data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It uses the Pluto üíÅ API to make objects available inside JS to pass plot data from Julia to HTML5.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please see:","category":"page"},{"location":"","page":"Home","title":"Home","text":"example notebook.","category":"page"},{"location":"","page":"Home","title":"Home","text":"So far, this package is in an early state.","category":"page"},{"location":"#PlutoVistaPlot","page":"Home","title":"PlutoVistaPlot","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PlutoVistaPlot\nPlutoVistaPlot(;resolution=(300,300),kwargs...)","category":"page"},{"location":"#PlutoVista.PlutoVistaPlot","page":"Home","title":"PlutoVista.PlutoVistaPlot","text":"mutable struct PlutoVistaPlot\n\nPlutoVistaPlot is a wrapper struct around different possible backends. As default, for 1D plots, PlutoPlotlyPlot and for 2D and 3D plots, PlutoVTKPlot are chosen. The backend is automatically chosen when the first plot is invoked.\n\n\n\n\n\n","category":"type"},{"location":"#PlutoVista.PlutoVistaPlot-Tuple{}","page":"Home","title":"PlutoVista.PlutoVistaPlot","text":"PlutoVistaPlot(; resolution, kwargs...)\n\n\nConstructor for PlutoVistaPlot. \n\nRelevant keyword arguments:\n\nresolution: Screen resolution in pixels\ndim: Space dimension of subsequent plots\n\n\n\n\n\n","category":"method"},{"location":"#1D-plots","page":"Home","title":"1D plots","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"plot\nplot!(p::PlutoVistaPlot,x,y; kwargs...)","category":"page"},{"location":"#PlutoVista.plot","page":"Home","title":"PlutoVista.plot","text":"plot(x, y; kwargs...)\n\n\nPlot y over y.\n\nArguments:\n\nx vector of x coordinates\ny vector of y coordinates (function values)\n\nKeyword  arguments:\n\nlimits=(1,-1): function limits\nxlimits=(1,-1) : x axis limits\nxlabel=\"\": x axis label     \nylabel=\"\": y axis label     \n`title=\"\" : plot title     \nxscale=:linear: linear or log scale for x axis\nyscale=:linear: linear or log scale for y axis\nlegend=:none: legend placement (:lt,:rt ...) \nclear=false: clear plot contents\nlabel=\"\": label of particular plot\ncolor=:auto\ntitlefontsize=12\naxisfontsize=10\ntickfontsize=10\nlegendfontsize=10\nlinewidth=2\nlinestyle=:solid: \nmarkersize=6\nmarkercount=10\nmarkertype=:none, possible values: :dtriangle, :utriangle, :rtriangle, :ltriangle, :circle, :square, :cross, :+, :xcross, :x,:diamond, :star5, :pentagon, `:hexagon\n\n\n\n\n\nplot(; datadim, backend, kwargs...)\n\n\nCreate empty 1D plot.\n\n\n\n\n\n","category":"function"},{"location":"#PlutoVista.plot!-Tuple{PlutoVistaPlot, Any, Any}","page":"Home","title":"PlutoVista.plot!","text":"plot!(p, x, y; backend, clear, kwargs...)\n\n\nAdd additional x-y plot to p\n\n\n\n\n\n","category":"method"},{"location":"#2D-plots","page":"Home","title":"2D plots","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When using vtk.js (default), interactive control via mouse includes the following actions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Left Mouse + Shift: Pan\nLeft Mouse + Ctrl/Alt: Reset camera\nLeft Mouse + Shift + Ctrl/Alt: Dolly (Zoom)\nMouse Wheel: Dolly (Zoom)\nMulti-Touch Pinch: Dolly (Zoom)\nMulti-Touch Pan: Pan\n3D Events: Camera Pose","category":"page"},{"location":"","page":"Home","title":"Home","text":"Compared to vtk.js,  keyboard interaction and rotation have  been disabled,  \"spin\" has been replaced by \"reset camera\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"tricontour\ntricontour!(p::PlutoVistaPlot,pts,tris,f;backend=:vtk, kwargs...)\nquiver2d\nquiver2d!(p::PlutoVistaPlot,pts,qvec;backend=:vtk, kwargs...)\ntrimesh\ntrimesh!(p::PlutoVistaPlot,pts,tris; backend=:vtk, kwargs...)","category":"page"},{"location":"#PlutoVista.tricontour","page":"Home","title":"PlutoVista.tricontour","text":"tricontour(pts, tris, f; kwargs...)\n\n\nFilled colored tricontour with isolines. By default, a vtk.js based backend is used. Plots piecewise linear function on  triangular grid.\n\nArguments:\n\npts:  2 x n_points array of point coordinates\ntris: 3 x n_tris array of point indices describing triangles\nf: n-vector of function values\n\nKeyword arguments:\n\ntitle=\"\"\nclear=false\nxlabel=\"x\": x axis label     \nylabel=\"y\": y axis label     \ncolormap=:viridis\nlevels=0: either number of interior isolevels, or vector of isolevel values\ncolorbarticks=:default : colorbar ticks. Default: levels\nlimits=:auto: function limits \naspect=1: xy aspect ratio (plotly backend)\n\n\n\n\n\ntricontour(; kwargs...)\n\n\nCreate empty tricontour plot\n\n\n\n\n\n","category":"function"},{"location":"#PlutoVista.tricontour!-Tuple{PlutoVistaPlot, Any, Any, Any}","page":"Home","title":"PlutoVista.tricontour!","text":"tricontour!(p, pts, tris, f; backend, kwargs...)\n\n\nAdd tricontour to existing plot\n\n\n\n\n\n","category":"method"},{"location":"#PlutoVista.quiver2d","page":"Home","title":"PlutoVista.quiver2d","text":"quiver2d(pts, qvec; kwargs...)\n\n\nQuiver plot, using vtk.js backend.\n\nArguments:\n\npts: 2 x n_pts array of points\nqvec: 2 x n_pts array of vector values\n\n\n\n\n\nquiver2d(; kwargs...)\n\n\nCreate empty quiver plot\n\n\n\n\n\n","category":"function"},{"location":"#PlutoVista.quiver2d!-Tuple{PlutoVistaPlot, Any, Any}","page":"Home","title":"PlutoVista.quiver2d!","text":"quiver2d!(p, pts, qvec; backend, kwargs...)\n\n\nAdd quiver to existing plot\n\n\n\n\n\n","category":"method"},{"location":"#PlutoVista.trimesh","page":"Home","title":"PlutoVista.trimesh","text":"trimesh(pts, tris; kwargs...)\n\n\nPlot triangular mesh, showing triangle boundaries and outer boundaries, using vtk.js backend.\n\nArguments:\n\npts:  2 x n_points array of point coordinates\ntris: 3 x n_tris array of point indices describing triangles\n\nKeyword arguments:\n\nmarkers=nothing: Optional n_tris integer vector of triangle markers\ncolormap: optional colormap for triangle markers\nedges: 2 x n_edges optional  array of point indices describing edges\nedgemarkers=nothing: optional n_edges vector of integer edge markers\nedgecolormap=nothing: optional colormap for edge markers\nshow_colorbar=true: optional show the colorbar next to the plot\n\n\n\n\n\ntrimesh(; kwargs...)\n\n\nCreate empty trimesh plot.\n\n\n\n\n\n","category":"function"},{"location":"#PlutoVista.trimesh!-Tuple{PlutoVistaPlot, Any, Any}","page":"Home","title":"PlutoVista.trimesh!","text":"trimesh!(p, pts, tris; backend, kwargs...)\n\n\nAdd trimesh to plot.\n\n\n\n\n\n","category":"method"},{"location":"#3D-plots","page":"Home","title":"3D plots","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When using vtk.js (default), interactive control via mouse includes the following actions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Left Mouse: Rotate\nLeft Mouse + Shift: Pan\nLeft Mouse + Ctrl/Alt: Reset camera\nLeft Mouse + Shift + Ctrl/Alt: Dolly (Zoom)\nMouse Wheel: Dolly (Zoom)\nMulti-Touch Rotate: Rotate\nMulti-Touch Pinch: Dolly (Zoom)\nMulti-Touch Pan: Pan\n3D Events: Camera Pose","category":"page"},{"location":"","page":"Home","title":"Home","text":"Compared to vtk.js,  keyboard interaction has   been disabled, and  \"spin\" has been replaced by \"reset camera\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"tetcontour\ntetcontour!(p::PlutoVistaPlot,pts,tets,f;backend=:vtk, kwargs...)\ntetmesh\ntetmesh!(p::PlutoVistaPlot,pts,tets; backend=:vtk, kwargs...)","category":"page"},{"location":"#PlutoVista.tetcontour","page":"Home","title":"PlutoVista.tetcontour","text":"tetcontour(pts, tets, f; kwargs...)\n\n\nPlot piecewise linear function on tetrahedral grid using vtk backend. The plot consists of three parts:\n\nTransparent isosurfaces of function values according to levels\nTransparent plane cuts with function \"hetmapes\" according to xplanes,yplanes,zplanes\nTransparent domain outline\n\nArguments:\n\npts:  3 x n_points array of point coordinates\ntets: 4 x n_tets array of point indices describing tetrahedra\nf: n_points-vector of function values\n\nKeyword arguments:\n\ntitle=\"\"\nclear=false\ncolormap=:viridis\nfaces=nothing: optional 3 x n_faces array of boundary faces\nfacemarkers=nothing: optional n_faces integer vector of face markers\nfacecolormap=nothing: optional colormap of facemarkers\nlevels=0: either number of interior isolevels, or vector of isolevel values\nlimits=:auto: function limits \nxplanes: either number or array of x coordinate values of x-orthogonal plane sections\nyplanes: either number or array of y coordinate values of y-orthogonal plane sections\nzplanes: either number or array of z coordinate values of z-orthogonal plane sections\nlevelalpha=0.25: alpha value for isosurfaces and plane cuts\noutlinealpha=0.1: alpha value for outline. Outliene is for value 0.0\n\n\n\n\n\ntetcontour(; kwargs...)\n\n\nCreate empty tetcontour plot.\n\n\n\n\n\n","category":"function"},{"location":"#PlutoVista.tetcontour!-Tuple{PlutoVistaPlot, Any, Any, Any}","page":"Home","title":"PlutoVista.tetcontour!","text":"tetcontour!(p, pts, tets, f; backend, kwargs...)\n\n\nAdd tetcontour to plot\n\n\n\n\n\n","category":"method"},{"location":"#PlutoVista.tetmesh","page":"Home","title":"PlutoVista.tetmesh","text":"tetmesh(pts, tets; kwargs...)\n\n\nPlot tetrahedral mesh, showing tetrahedron boundaries and outer boundaries, using vtk.js backend. The plot consists of two parts:\n\nA subset of tetrahedra visible after cutting of all tets with are on the positive side of the respective x, y, z planes\nA transpatemt outline of the boundary.\n\nArguments:\n\npts:  3 x n_points array of point coordinates\ntets: 4 x n_tris array of point indices describing tetrahedra\n\nKeyword arguments:\n\nmarkers=nothing: Optional n_tets integer vector of tetrahedron markers\ncolormap: optional colormap for tetrahedron markers\nfaces=nothing: optional 3 x n_faces array of boundary faces\nfacemarkers=nothing: optional n_faces integer vector of face markers\nfacecolormap=nothing: optional colormap of facemarkers\nxplanes: array of x coordinate values for cut-off in x-direction\nyplanes: array of y coordinate values for cut-off in y-direction\nzplanes: array of z coordinate values for cut-off in z-direction\noutlinealpha=0.1: alpha value for outline. Outliene is for value 0.0\nshow_colorbar=true: optional show the colorbar next to the plot\n\n\n\n\n\ntetmesh(; kwargs...)\n\n\nCreate empty tetmesh plot.\n\n\n\n\n\n","category":"function"},{"location":"#PlutoVista.tetmesh!-Tuple{PlutoVistaPlot, Any, Any}","page":"Home","title":"PlutoVista.tetmesh!","text":"tetmesh!(p, pts, tets; backend, kwargs...)\n\n\nAdd tetmesh to plot\n\n\n\n\n\n","category":"method"},{"location":"#Pluto-utilities","page":"Home","title":"Pluto utilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ScreenWidthGrabber\nPlutoCellWidener","category":"page"},{"location":"#PlutoVista.ScreenWidthGrabber","page":"Home","title":"PlutoVista.ScreenWidthGrabber","text":"@bind width ScreenWidthGrabber()\n\nDetect screen width from pluto notebook. (see https://discourse.julialang.org/t/cell-width-in-pluto-notebook/49761/3)\n\n\n\n\n\n","category":"type"},{"location":"#PlutoVista.PlutoCellWidener","page":"Home","title":"PlutoVista.PlutoCellWidener","text":"PlutoCellWidener(px)\n\nSet pluto cell width to a given number of pixels.\n\n(see https://discourse.julialang.org/t/cell-width-in-pluto-notebook/49761/3)\n\nSetting width larger than standard may interfer with other Pluto functionality.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [PlutoVista]\nPublic = false\nPages = [\"plutovistaplot.jl\",\"plutovtkplot.jl\",\"plutoplotlyplot.jl\"]","category":"page"},{"location":"internals/#PlutoVista.backend!-Tuple{PlutoVistaPlot}","page":"Internals","title":"PlutoVista.backend!","text":"backend!(p::PlutoVistaPlot; datadim=1, backend=:default, clear=false)\n\nOverwrite backend if clear is true.\n\n\n\n\n\n","category":"method"},{"location":"internals/#PlutoVista.command!-Union{Tuple{T}, Tuple{T, Any}} where T<:PlutoVista.AbstractPlutoVistaBackend","page":"Internals","title":"PlutoVista.command!","text":"command!(p, cmd)\n\n\nEnter new command named cmd.\n\nThe idea is to pass one single Dict with all plot data to javascript using AbstractPlutoDingetjes.Display.published_to_js.\n\nFor this purpose we need a some \"language\" hidden in  behind the dict.\n\nPlot   elements  are   described  by   commands  executed   one  after another. For  this purpose,  we use integers  converted to  strings as dict keys and pass the command name as the corresponding entry.\n\nThe entry cmdcount keeps track of  the number of commands. So we can parse all  commands from 1  to jsdict[:cmdcount] in javascript  in the same sequence as they have been entered.\n\nParameters are named and entered into the dictionary with the  command number as prefix.\n\nE.g. for a polyline as command number 5, we create the entries\n\n\"5\" => \"polyline\"\n\"5x\" => Vector of x coordinates in canvas coordinate system\n\"5y\" => Vector of y coordinates in canvas coordinate system\n\n\n\n\n\n","category":"method"},{"location":"internals/#PlutoVista.parameter!-Union{Tuple{T}, Tuple{T, Any, Any}} where T<:PlutoVista.AbstractPlutoVistaBackend","page":"Internals","title":"PlutoVista.parameter!","text":"parameter!(p, name, value)\n\n\nAfter command!, create a parameter entry\n\n\n\n\n\n","category":"method"},{"location":"internals/#PlutoVista.reset!-Tuple{T} where T<:PlutoVista.AbstractPlutoVistaBackend","page":"Internals","title":"PlutoVista.reset!","text":"reset!(p)\n\n\nReset command list\n\n\n\n\n\n","category":"method"},{"location":"internals/#PlutoVista.triang-Tuple{Any, Any}","page":"Internals","title":"PlutoVista.triang","text":"triang(X, Y)\n\n\nCreate triangulation data from X and Y coordinate vectors\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.show-Tuple{IO, Union{MIME{Symbol(\"text/html\")}, MIME{Symbol(\"juliavscode/html\")}}, PlutoVTKPlot}","page":"Internals","title":"Base.show","text":"Base.show(io::IO,::MIME\"text/html\",p::PlutoVTKPlot)\n\nShow plot in html. This creates a vtk.js based renderer along with a canvas for handling the colorbar.\n\n\n\n\n\n","category":"method"},{"location":"internals/#PlutoVista.outline!-Tuple{PlutoVTKPlot, Vararg{Any, 7}}","page":"Internals","title":"PlutoVista.outline!","text":"outline!(p::PlutoVTKPlot,pts,faces,facemarkers,facecolormap,nbregions,xyzmin,xyzmax;alpha=0.1)\n\nPlot transparent outline of grid boundaries.\n\n\n\n\n\n","category":"method"},{"location":"internals/#PlutoVista.vtkpolys-Tuple{Any}","page":"Internals","title":"PlutoVista.vtkpolys","text":"   vtkpolys(tris; offset=0)\n\nSet up  polygon (triangle) data for vtk.  Coding is   [3, i11, i12, i13,   3 , i21, i22 ,i23, ...] Careful: js indexing counts from zero.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.show-Tuple{IO, Union{MIME{Symbol(\"text/html\")}, MIME{Symbol(\"juliavscode/html\")}}, PlutoPlotlyPlot}","page":"Internals","title":"Base.show","text":"show(\n    io::IO,\n    m::Union{MIME{Symbol(\"text/html\")}, MIME{Symbol(\"juliavscode/html\")}},\n    p::PlutoPlotlyPlot\n) -> Any\n\n\nShow plotly plot.\n\n\n\n\n\n","category":"method"},{"location":"vtk/#vtk.js-API","page":"vtk.js API","title":"vtk.js API","text":"","category":"section"},{"location":"vtk/","page":"vtk.js API","title":"vtk.js API","text":"This API is normally being used via PlutoVistaPlot.","category":"page"},{"location":"vtk/","page":"vtk.js API","title":"vtk.js API","text":"PlutoVTKPlot\nPlutoVTKPlot(;resolution=(300,300),kwargs...)\ntricontour!(p::PlutoVTKPlot,pts,tris,f; kwargs...)\nquiver2d!(p::PlutoVTKPlot, pts, qvec; kwargs...)\ntriplot!(p::PlutoVTKPlot,pts, tris,f)\ncontour!(p::PlutoVTKPlot,X,Y,f; kwargs...)\ntrimesh!(p::PlutoVTKPlot,pts, tris; kwargs...)\ntetcontour!(p::PlutoVTKPlot,pts, tris, f; kwargs...)\ntetmesh!(p::PlutoVTKPlot,pts, tris; kwargs...)","category":"page"},{"location":"vtk/#PlutoVista.PlutoVTKPlot","page":"vtk.js API","title":"PlutoVista.PlutoVTKPlot","text":"mutable struct PlutoVTKPlot <: PlutoVista.AbstractPlutoVistaBackend\n\nStructure containig plot information for vtk.js.\n\n\n\n\n\n","category":"type"},{"location":"vtk/#PlutoVista.PlutoVTKPlot-Tuple{}","page":"vtk.js API","title":"PlutoVista.PlutoVTKPlot","text":"PlutoVTKPlot(; resolution, kwargs...)\n\n\nCreate a vtk plot with given resolution in the notebook.\n\n\n\n\n\n","category":"method"},{"location":"vtk/#PlutoVista.tricontour!-Tuple{PlutoVTKPlot, Any, Any, Any}","page":"vtk.js API","title":"PlutoVista.tricontour!","text":"tricontour!(p, pts, tris, f; kwargs...)\n\n\nPlot piecewise linear function on  triangular grid given as \"heatmap\". Isolines can be given as a number or as a range.\n\n\n\n\n\n","category":"method"},{"location":"vtk/#PlutoVista.quiver2d!-Tuple{PlutoVTKPlot, Any, Any}","page":"vtk.js API","title":"PlutoVista.quiver2d!","text":"quiver2d!(p, pts, qvec; kwargs...)\n\n\n2D quiver.\n\n\n\n\n\n","category":"method"},{"location":"vtk/#PlutoVista.triplot!-Tuple{PlutoVTKPlot, Any, Any, Any}","page":"vtk.js API","title":"PlutoVista.triplot!","text":"triplot!(p, pts, tris, f; kwargs...)\n\n\nExperimental: Plot piecewise linear function on  triangular grid given by points and triangles as matrices\n\n\n\n\n\n","category":"method"},{"location":"vtk/#PlutoVista.contour!-Tuple{PlutoVTKPlot, Any, Any, Any}","page":"vtk.js API","title":"PlutoVista.contour!","text":"contour!(p, X, Y, f; kwargs...)\n\n\nPlot piecewise linear function on  triangular grid created from the tensor product of X and Y arrays as \"heatmap\". Levels can be given as a number or as a range.\n\n\n\n\n\n","category":"method"},{"location":"vtk/#PlutoVista.trimesh!-Tuple{PlutoVTKPlot, Any, Any}","page":"vtk.js API","title":"PlutoVista.trimesh!","text":"trimesh!(p, pts, tris; kwargs...)\n\n\nPlot  triangular grid with optional region and boundary markers.\n\n\n\n\n\n","category":"method"},{"location":"vtk/#PlutoVista.tetcontour!-Tuple{PlutoVTKPlot, Any, Any, Any}","page":"vtk.js API","title":"PlutoVista.tetcontour!","text":"tetcontour!(p, pts, tets, func; parentpts, kwargs...)\n\n\nPlot isosurfaces given by levels and contour maps on planes given by the *planes parameters for piecewise linear function on  tetrahedral mesh.\n\npts,tets,func can be arrays of grid data, allowing to plot discontinouos functions\n\n\n\n\n\n","category":"method"},{"location":"vtk/#PlutoVista.tetmesh!-Tuple{PlutoVTKPlot, Any, Any}","page":"vtk.js API","title":"PlutoVista.tetmesh!","text":"tetmesh!(p, pts, tets; kwargs...)\n\n\nPlot parts of tetrahedral mesh below the planes given by the *plane parameters.\n\n\n\n\n\n","category":"method"}]
}
